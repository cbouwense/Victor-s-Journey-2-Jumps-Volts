<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_victor_idle_dim1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fuck jews

visible = false;
alarm[0] = 1;
moveable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm to go to next room
show_debug_message("tried to go to next room");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = true;
moveable = true;

global.blocksVisible = true;
global.resetVisibility = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Real Creation Code because GameMaker is Fucking Retarded

visible = true;
moveable = true;
hsp = 0;
vsp = 0;
jumpspeed = 10;
movespeed = 5;
inversions = global.inversions;
grav = global.grav;
dim = global.dim; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Frame logic

// Get the player's input

key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_up);
key_change_dim = keyboard_check_pressed(vk_space);
key_reset = keyboard_check_pressed(ord("R"));
key_throw = keyboard_check_pressed(ord("F"));
key_teleport = keyboard_check_pressed(ord("G"));

// React to inputs
if (key_reset == 1) {
    reset();
}

if (!moveable) {
    key_right = 0;
    key_left = 0;
    key_jump = 0;
    key_change_dim = 0;
}

move = key_right + key_left;

hsp = move * movespeed;

// Negative is upward movement and positive is downwards
vsp += grav - (vsp/67);
show_debug_message(string(vsp));

// Jumping and sprite logic
if (vcolliding()) {
    // Jumping
    if (key_jump == 1) {
        audio_play_sound(snd_jump, 2, false);
    }
    if (image_yscale == 1) {
        vsp = key_jump * -jumpspeed;
    }
    else {
        vsp = key_jump * jumpspeed;
    }
    // Sprite
    if (move != 0) {
        change_spr_run();
    }
    else {
        change_spr_idle();
    }
}
else {
    change_spr_air();
}

// Inversion logic
if (inversions &gt; 0 &amp;&amp; key_change_dim == 1) {
    if (inversions == 1) {
        // What is this...
        global.fuckyou = true;
    }
    audio_play_sound(snd_change_dim, 2, false);
    if (dim == 1) {
        dim += key_change_dim;
    }
    else {
        dim -= key_change_dim;
    }
    change_spr_dim();
    grav *= -1;
    image_yscale *= -1;
    global.blocksVisible = !global.blocksVisible;
    inversions--;
}
else {
    // What does this even DO??
    global.fuckyou = false;
}

// Inner collision with collision dimensional objects
if (place_meeting(x, y, obj_dim1) &amp;&amp; dim == 1
        || place_meeting(x, y, obj_dim2) &amp;&amp; dim == 2
        || place_meeting(x, y, obj_spikes)
        || place_meeting(x, y, obj_dis) &amp;&amp; global.blocksVisible) {
    reset();
}

// Horizontal collision with wall
if (place_meeting(x + hsp, y, obj_wall)) {
    while (!place_meeting(x + sign(hsp), y, obj_wall)) {
        x += sign(hsp);
    }
    hsp = 0;
}

// Horizontal collision with dimension 1 object
if (place_meeting(x + hsp, y, obj_dim1) &amp;&amp; dim == 1) {
    while (!place_meeting(x + sign(hsp), y, obj_dim1)) {
        x += sign(hsp);
    }
    hsp = 0;
}

// Horizontal collision with dimension 2 object
if (place_meeting(x + hsp, y, obj_dim2) &amp;&amp; dim == 2) {
    while (!place_meeting(x + sign(hsp), y, obj_dim2)) {
        x += sign(hsp);
    }
    hsp = 0;
}

// Horizontal collision with disappearing block
if (place_meeting(x + hsp, y, obj_dis)  &amp;&amp; global.blocksVisible) {
    while (!place_meeting(x + sign(hsp), y, obj_dis)) {
        x += sign(hsp);
    }
    hsp = 0;
}

// Vertical collision with wall
if (place_meeting(x, y + vsp, obj_wall)) {
    while (!place_meeting(x, y + sign(vsp), obj_wall)) {
        y += sign(vsp);
    }
    vsp = 0;
}

// Vertical collision with dimension 1 object
if (place_meeting(x, y + vsp, obj_dim1) &amp;&amp; dim == 1) {
    while (!place_meeting(x, y + sign(vsp), obj_dim1)) {
        y += sign(vsp);
    }
    vsp = 0;
}

// Vertical collision with dimension 2 object
if (place_meeting(x, y + vsp, obj_dim2) &amp;&amp; dim == 2) {
    while (!place_meeting(x, y + sign(vsp), obj_dim2)) {
        y += sign(vsp);
    }
    vsp = 0;
}

// Vertical collision with disappearing object
if (place_meeting(x, y + vsp, obj_dis) &amp;&amp; global.blocksVisible) {
    while (!place_meeting(x, y + sign(vsp), obj_dis)) {
        y += sign(vsp);
    }
    vsp = 0;
}

// Collision with goal
if (place_meeting(x, y, obj_goal)) {
    next_level();
}

// Out of bounds collision
if (place_meeting(x, y, obj_oob)) {
    reset();
}

// Update sprite
// What does this even do...
if (move != 0) {
    image_xscale = move;
}

// Update Position
x += hsp;
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to Main Menu

room_goto(title_screen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
