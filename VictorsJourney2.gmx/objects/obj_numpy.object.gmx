<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_numpy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>thrown = false;

grav = global.grav;

r = 81;
theta = 0;
theta_speed = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Frame Logic

//show_debug_message("numpy x: " + string(x));
//show_debug_message("numpy y: " + string(y));

// Setup 

if (!thrown) {

    theta += theta_speed;
    if (theta &gt;= 360) theta -= 360;
    if (obj_victor.image_xscale == 1) { // facing right
        x = obj_victor.x + lengthdir_x(r, theta);
    }
    else { // facing left
        x = obj_victor.x - lengthdir_x(r, theta);
    }
    if (obj_victor.image_yscale == 1) { // right side up
        y = obj_victor.y + lengthdir_y(r, theta);
    }
    else { // upside down
        y = obj_victor.y - lengthdir_y(r, theta);
    }
    
    if (obj_victor.image_xscale == 1 &amp;&amp; x == obj_victor.x + r
        || obj_victor.image_xscale == -1 &amp;&amp; x == obj_victor.x - r
        || obj_victor.image_yscale == 1 &amp;&amp; y == obj_victor.y - r
        || obj_victor.image_yscale == -1 &amp;&amp; y == obj_victor.y + r) {
        theta_speed *= -1;
    }
    
}
// Thrown
else {

    if (obj_victor.grav &lt; 0 &amp;&amp; grav &gt; 0
        || obj_victor.grav &gt; 0 &amp;&amp; grav &lt; 0) {
        grav *= -1;
    }

    vsp += grav - (vsp/67);

    // Horizontal collision with wall
    if (place_meeting(x + hsp, y, obj_wall)) {
        while (!place_meeting(x + sign(hsp), y, obj_wall)) {
            x += sign(hsp);
        }
        grav = 0;
        hsp = 0;
        vsp = 0;
    }
    
    // Horizontal collision with dimension 1 object
    if (place_meeting(x + hsp, y, obj_dim1) &amp;&amp; obj_victor.dim == 1) {
        while (!place_meeting(x + sign(hsp), y, obj_dim1)) {
            x += sign(hsp);
        }
        grav = 0;
        hsp = 0;
        vsp = 0;
    }
    
    // Horizontal collision with dimension 2 object
    if (place_meeting(x + hsp, y, obj_dim2) &amp;&amp; obj_victor.dim == 2) {
        while (!place_meeting(x + sign(hsp), y, obj_dim2)) {
            x += sign(hsp);
        }
        grav = 0;
        hsp = 0;
        vsp = 0;
    }
    
    // Horizontal collision with disappearing block
    if (place_meeting(x + hsp, y, obj_dis) &amp;&amp; global.blocksVisible) {
        while (!place_meeting(x + sign(hsp), y, obj_dis)) {
            x += sign(hsp);
        }
        grav = 0;
        hsp = 0;
        vsp = 0;
    }
    
    // Vertical collision with wall
    if (place_meeting(x, y + vsp, obj_wall)) {
        while (!place_meeting(x, y + sign(vsp), obj_wall)) {
            y += sign(vsp);
        }
        grav = 0;
        hsp = 0;
        vsp = 0;
    }
    
    // Vertical collision with dimension 1 object
    if (place_meeting(x, y + vsp, obj_dim1) &amp;&amp; obj_victor.dim == 1) {
        while (!place_meeting(x, y + sign(vsp), obj_dim1)) {
            y += sign(vsp);
        }
        grav = 0;
        hsp = 0;
        vsp = 0;
    }
    
    // Vertical collision with dimension 2 object
    if (place_meeting(x, y + vsp, obj_dim2) &amp;&amp; obj_victor.dim == 2) {
        while (!place_meeting(x, y + sign(vsp), obj_dim2)) {
            y += sign(vsp);
        }
        grav = 0;
        hsp = 0;
        vsp = 0;
    }
    
    // Vertical collision with disappearing object
    if (place_meeting(x, y + vsp, obj_dis) &amp;&amp; global.blocksVisible) {
        while (!place_meeting(x, y + sign(vsp), obj_dis)) {
            y += sign(vsp);
        }
        grav = 0;
        hsp = 0;
        vsp = 0;
    }
    
    // Out of bounds collision
    if (place_meeting(x, y, obj_oob)) {
        obj_victor.numpy_out = false;
        instance_destroy();
    }
    
    x += hsp;
    y += vsp;
    
    if (place_meeting(x, y, obj_victor)) {
        obj_victor.numpy_out = false;
        obj_health.image_index = 0;
        instance_destroy();
    }
    
}

if (global.reset_numpy) {
    show_debug_message("set reset_numpy false");
    obj_victor.numpy_out = false;
    global.reset_numpy = false;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="71">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_victor.numpy_out = false;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!thrown) {
    hsp = abs(x - obj_victor.x);
    vsp = abs(y - obj_victor.y);
    
    if (x &lt; obj_victor.x) {
        hsp *= -1;
    }
    
    if (y &lt; obj_victor.y) {
        vsp *= -1;
    }
    
    hsp /= 3;
    vsp /= 3;
    
    show_debug_message("hsp: " + string(hsp));
    show_debug_message("vsp: " + string(vsp));
    
    thrown = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
